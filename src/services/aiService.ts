export interface SummaryOptions {
  type: 'short' | 'medium' | 'detailed' | 'study_guide';
  tone: 'formal' | 'casual' | 'simple';
  language: 'pt-BR';
}

export class AIService {
  private static readonly API_URL = 'https://api.openai.com/v1/chat/completions';
  
  static async generateSummary(content: string, options: SummaryOptions): Promise<string> {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Chave da API OpenAI n√£o configurada');
    }

    // Validate content length
    if (content.length < 100) {
      throw new Error('Conte√∫do muito curto para gerar resumo');
    }

    // Truncate content if too long (GPT-4 has token limits)
    const maxContentLength = 15000; // Increased for study guide
    const truncatedContent = content.length > maxContentLength 
      ? content.substring(0, maxContentLength) + '...'
      : content;

    const prompt = this.buildPrompt(truncatedContent, options);

    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: this.getSystemPrompt(options.type)
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: this.getMaxTokens(options.type),
          temperature: 0.3,
          presence_penalty: 0.1,
          frequency_penalty: 0.1,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Erro na API OpenAI: ${response.status} - ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      const summary = data.choices[0]?.message?.content;
      
      if (!summary) {
        throw new Error('Resposta vazia da API OpenAI');
      }

      return summary.trim();
    } catch (error) {
      console.error('Error generating summary:', error);
      
      if (error instanceof Error) {
        if (error.message.includes('API')) {
          throw new Error(`Erro na gera√ß√£o do resumo: ${error.message}`);
        }
        throw error;
      }
      
      throw new Error('Erro desconhecido ao gerar resumo');
    }
  }

  private static getSystemPrompt(type: SummaryOptions['type']): string {
    if (type === 'study_guide') {
      return `Voc√™ √© um especialista em T√©cnica de Estudos e seu papel √© me ajudar a preparar para uma prova. 

SUAS CARACTER√çSTICAS:
1. EXPERTISE: Conhecimento profundo em t√©cnicas de memoriza√ß√£o e aprendizagem
2. METODOLOGIA: Especialista em criar guias de estudos estruturados
3. DID√ÅTICA: Transforma conte√∫do complexo em material de estudo eficiente
4. PRECIS√ÉO: Mant√©m exatid√£o t√©cnica e foco em concursos p√∫blicos
5. ORGANIZA√á√ÉO: Estrutura informa√ß√µes para m√°xima reten√ß√£o

DIRETRIZES OBRIGAT√ìRIAS:
- Analise o documento e crie um guia de estudos detalhado
- Use formata√ß√£o Markdown para organiza√ß√£o clara
- Foque no que √© mais relevante para provas e concursos
- Mantenha linguagem clara e objetiva
- Destaque informa√ß√µes cr√≠ticas que frequentemente aparecem em provas
- Use exemplos pr√°ticos quando apropriado`;
    }

    return `Assuma o papel de um colega de estudos que est√° me ajudando a revisar a mat√©ria, normalmente para concursos p√∫blicos brasileiros. Suas caracter√≠sticas:

1. EXPERTISE: Conhecimento profundo em todas as mat√©rias de concursos p√∫blicos
2. CLAREZA: Transforma conte√∫do complexo em linguagem acess√≠vel
3. ESTRUTURA: Organiza informa√ß√µes de forma l√≥gica e memor√°vel
4. PRECIS√ÉO: Mant√©m a exatid√£o t√©cnica e jur√≠dica
5. FOCO: Destaca o que √© mais relevante para provas

DIRETRIZES OBRIGAT√ìRIAS:
- Comece me dando uma vis√£o geral do que o documento aborda em um √∫nico par√°grafo
- Use formata√ß√£o Markdown para organiza√ß√£o
- Seu objetivo √© me ensinar os fundamentos do documento de forma clara e estruturada
- Quero que voc√™ crie um guia de estudos baseado nos pontos-chave do texto
- Simplifique termos t√©cnicos sem perder precis√£o
- Mantenha uma linguagem simples e clara
- Use exemplos quando apropriado
- Use analogias e exemplos do dia a dia quando poss√≠vel
- Use frases simples e objetivas
- Use palavras-chave relevantes para concursos
- Organize em t√≥picos hier√°rquicos
- Destaque informa√ß√µes frequentes em provas
- Mantenha linguagem clara e objetiva`;
  }

  private static buildPrompt(content: string, options: SummaryOptions): string {
    const toneInstructions = {
      formal: 'Use linguagem t√©cnica e formal, apropriada para concursos p√∫blicos. Mantenha terminologia jur√≠dica e administrativa precisa.',
      casual: 'Use linguagem clara e acess√≠vel, mas mantenha a precis√£o t√©cnica. Explique termos complexos de forma simples.',
      simple: 'Explique como se fosse para algu√©m que est√° come√ßando a estudar o assunto. Use analogias e exemplos do dia a dia quando poss√≠vel.'
    };

    const typeInstructions = {
      short: `Crie um resumo CURTO e direto:
- M√°ximo 10 pontos principais em bullet points
- Foque apenas no essencial
- Use frases concisas e objetivas
- Ideal para revis√£o r√°pida`,

      medium: `Crie um resumo M√âDIO conceitual:
- Organize em 3-5 t√≥picos principais
- Explique conceitos de forma clara
- Inclua defini√ß√µes importantes
- Mantenha estrutura l√≥gica
- Ideal para estudo regular`,

      detailed: `Crie um resumo DETALHADO e estruturado:
- Organize em t√≥picos e subt√≥picos
- Inclua defini√ß√µes, exemplos e aplica√ß√µes
- Mantenha hierarquia clara (##, ###)
- Destaque pontos importantes com **negrito**
- Inclua observa√ß√µes e dicas para provas
- Ideal para estudo aprofundado`,

      study_guide: `Crie um GUIA DE ESTUDOS COMPLETO seguindo EXATAMENTE esta estrutura:

## üìã Resumo Estruturado
[Um resumo dos principais t√≥picos, seguindo a ordem do documento]

## üéØ Pontos-Chave
[Lista em bullet points com as informa√ß√µes mais cr√≠ticas, como:]
- Datas importantes
- Defini√ß√µes essenciais
- Artigos de lei relevantes
- F√≥rmulas importantes
- Conceitos que frequentemente aparecem em provas

## üìö Gloss√°rio
[Defina os 5 termos t√©cnicos mais relevantes mencionados no formato:]
**Termo 1:** Defini√ß√£o clara e concisa
**Termo 2:** Defini√ß√£o clara e concisa
[...continue at√© 5 termos]

## ‚ùì Quest√µes de Revis√£o
[Elabore 5 perguntas dissertativas baseadas no conte√∫do que poderiam cair na prova:]

**1. [Pergunta dissertativa]**
*Resposta:* [Resposta concisa e completa]

**2. [Pergunta dissertativa]**
*Resposta:* [Resposta concisa e completa]

[...continue at√© 5 quest√µes]

IMPORTANTE: Siga EXATAMENTE esta estrutura com os emojis e formata√ß√£o indicados.`
    };

    if (options.type === 'study_guide') {
      return `
TAREFA: Criar um guia de estudos detalhado para prepara√ß√£o de prova

${typeInstructions[options.type]}

TOM: ${toneInstructions[options.tone]}

INSTRU√á√ïES ESPEC√çFICAS:
- Analise o documento completamente
- Identifique os conceitos mais importantes para concursos
- Destaque defini√ß√µes que frequentemente aparecem em provas
- Crie quest√µes que realmente poderiam cair na prova
- Use formata√ß√£o Markdown apropriada
- Mantenha foco no que √© cobrado em concursos p√∫blicos
- Seja espec√≠fico e detalhado em cada se√ß√£o

CONTE√öDO PARA ANALISAR:
${content}

GUIA DE ESTUDOS:
      `;
    }

    return `
TAREFA: Criar um resumo de alta qualidade para concurso p√∫blico

TIPO DE RESUMO: ${typeInstructions[options.type]}

TOM: ${toneInstructions[options.tone]}

INSTRU√á√ïES ESPEC√çFICAS:
- Identifique os conceitos mais importantes para concursos
- Destaque defini√ß√µes que frequentemente aparecem em provas
- Organize de forma que facilite memoriza√ß√£o
- Use formata√ß√£o Markdown apropriada
- Mantenha foco no que √© cobrado em concursos p√∫blicos

CONTE√öDO PARA RESUMIR:
${content}

RESUMO:
    `;
  }

  private static getMaxTokens(type: SummaryOptions['type']): number {
    switch (type) {
      case 'short': return 800;
      case 'medium': return 1500;
      case 'detailed': return 2500;
      case 'study_guide': return 4000; // Increased for comprehensive study guide
      default: return 1500;
    }
  }

  static async categorizeDocument(content: string): Promise<string> {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      return this.fallbackCategorization(content);
    }

    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um especialista em categoriza√ß√£o de materiais para concursos p√∫blicos brasileiros.'
            },
            {
              role: 'user',
              content: `Analise o texto abaixo e categorize-o em UMA das seguintes categorias de concursos p√∫blicos:

CATEGORIAS DISPON√çVEIS:
- Direito Constitucional
- Direito Administrativo  
- Direito Civil
- Direito Penal
- Direito Processual
- Direito Tribut√°rio
- Portugu√™s
- Matem√°tica
- Racioc√≠nio L√≥gico
- Inform√°tica
- Conhecimentos Gerais
- Atualidades
- Administra√ß√£o P√∫blica
- Contabilidade
- Economia
- Estat√≠stica
- Geografia
- Hist√≥ria
- Legisla√ß√£o Espec√≠fica
- Outros

Responda APENAS com o nome da categoria, sem explica√ß√µes.

TEXTO:
${content.substring(0, 2000)}...`
            }
          ],
          max_tokens: 50,
          temperature: 0.1,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const category = data.choices[0]?.message?.content?.trim();
        return category || this.fallbackCategorization(content);
      }
    } catch (error) {
      console.error('Error categorizing document:', error);
    }
    
    return this.fallbackCategorization(content);
  }

  private static fallbackCategorization(content: string): string {
    const categories = {
      'Direito Constitucional': ['constitui√ß√£o', 'constitucional', 'direitos fundamentais', 'princ√≠pios constitucionais', 'poder constituinte'],
      'Direito Administrativo': ['administra√ß√£o p√∫blica', 'servidor p√∫blico', 'licita√ß√£o', 'contrato administrativo', 'ato administrativo'],
      'Direito Civil': ['c√≥digo civil', 'pessoa f√≠sica', 'pessoa jur√≠dica', 'contratos', 'responsabilidade civil'],
      'Direito Penal': ['c√≥digo penal', 'crime', 'contraven√ß√£o', 'pena', 'processo penal'],
      'Portugu√™s': ['gram√°tica', 'concord√¢ncia', 'reg√™ncia', 'ortografia', 'reda√ß√£o', 'interpreta√ß√£o de texto'],
      'Matem√°tica': ['equa√ß√£o', 'fun√ß√£o', 'geometria', '√°lgebra', 'trigonometria'],
      'Racioc√≠nio L√≥gico': ['l√≥gica', 'proposi√ß√£o', 'silogismo', 'sequ√™ncia', 'padr√£o'],
      'Inform√°tica': ['computador', 'software', 'hardware', 'internet', 'sistema operacional'],
      'Conhecimentos Gerais': ['hist√≥ria do brasil', 'geografia', 'atualidades', 'pol√≠tica'],
      'Administra√ß√£o P√∫blica': ['gest√£o p√∫blica', 'planejamento', 'organiza√ß√£o', 'controle'],
      'Contabilidade': ['balan√ßo', 'demonstra√ß√£o', 'ativo', 'passivo', 'patrim√¥nio']
    };

    const contentLower = content.toLowerCase();
    
    for (const [category, keywords] of Object.entries(categories)) {
      const matchCount = keywords.filter(keyword => contentLower.includes(keyword)).length;
      if (matchCount >= 2) {
        return category;
      }
    }
    
    // Single keyword match
    for (const [category, keywords] of Object.entries(categories)) {
      if (keywords.some(keyword => contentLower.includes(keyword))) {
        return category;
      }
    }
    
    return 'Outros';
  }

  static async extractTags(content: string): Promise<string[]> {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      return this.fallbackTagExtraction(content);
    }

    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ extrai tags relevantes de textos para concursos p√∫blicos.'
            },
            {
              role: 'user',
              content: `Extraia 3-7 tags relevantes do texto abaixo. As tags devem ser:
- Palavras-chave importantes para concursos
- Conceitos principais do texto
- Termos que facilitam busca e organiza√ß√£o

Responda apenas com as tags separadas por v√≠rgula, sem numera√ß√£o.

TEXTO:
${content.substring(0, 1500)}...`
            }
          ],
          max_tokens: 100,
          temperature: 0.2,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        const tagsText = data.choices[0]?.message?.content?.trim();
        if (tagsText) {
          return tagsText.split(',').map(tag => tag.trim()).filter(Boolean).slice(0, 7);
        }
      }
    } catch (error) {
      console.error('Error extracting tags:', error);
    }
    
    return this.fallbackTagExtraction(content);
  }

  private static fallbackTagExtraction(content: string): string[] {
    const commonTerms = [
      'princ√≠pios', 'conceitos', 'defini√ß√µes', 'lei', 'artigo', 'direito',
      'administra√ß√£o', 'p√∫blico', 'servidor', 'concurso', 'prova', 'quest√£o',
      'constitui√ß√£o', 'c√≥digo', 'norma', 'regulamento', 'decreto', 'portaria',
      'processo', 'procedimento', 'compet√™ncia', 'atribui√ß√£o', 'responsabilidade'
    ];

    const contentLower = content.toLowerCase();
    const foundTags = commonTerms.filter(term => contentLower.includes(term));
    
    return foundTags.slice(0, 5);
  }

  static async analyzeEdital(editalContent: string): Promise<EditalAnalysis> {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Chave da API OpenAI n√£o configurada');
    }

    const prompt = `
Analise o edital de concurso abaixo e extraia as seguintes informa√ß√µes em formato JSON:

{
  "concursoNome": "Nome do concurso",
  "orgao": "√ìrg√£o respons√°vel",
  "cargo": "Cargo principal",
  "dataProva": "Data da prova (formato YYYY-MM-DD se dispon√≠vel)",
  "materias": [
    {
      "nome": "Nome da mat√©ria",
      "peso": "Peso/import√¢ncia (1-5)",
      "topicos": ["t√≥pico1", "t√≥pico2"]
    }
  ],
  "horasEstudoSugeridas": "N√∫mero de horas di√°rias sugeridas",
  "nivelDificuldade": "easy|medium|hard",
  "observacoes": "Observa√ß√µes importantes sobre o edital"
}

EDITAL:
${editalContent.substring(0, 8000)}...
    `;

    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: 'Voc√™ √© um especialista em an√°lise de editais de concursos p√∫blicos brasileiros. Extraia informa√ß√µes precisas e estruturadas.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 2000,
          temperature: 0.1,
        }),
      });

      if (!response.ok) {
        throw new Error(`Erro na API OpenAI: ${response.status}`);
      }

      const data = await response.json();
      const analysisText = data.choices[0]?.message?.content;
      
      if (!analysisText) {
        throw new Error('Resposta vazia da API OpenAI');
      }

      try {
        return JSON.parse(analysisText);
      } catch {
        // Fallback se n√£o conseguir parsear JSON
        return this.fallbackEditalAnalysis(editalContent);
      }
    } catch (error) {
      console.error('Error analyzing edital:', error);
      throw new Error('Erro ao analisar edital com IA');
    }
  }

  private static fallbackEditalAnalysis(content: string): EditalAnalysis {
    const contentLower = content.toLowerCase();
    
    // Detectar mat√©rias comuns
    const commonSubjects = [
      'direito constitucional', 'direito administrativo', 'direito civil',
      'direito penal', 'portugu√™s', 'matem√°tica', 'racioc√≠nio l√≥gico',
      'inform√°tica', 'conhecimentos gerais', 'atualidades'
    ];
    
    const foundSubjects = commonSubjects
      .filter(subject => contentLower.includes(subject))
      .map(subject => ({
        nome: subject.charAt(0).toUpperCase() + subject.slice(1),
        peso: 3,
        topicos: []
      }));

    return {
      concursoNome: 'Concurso P√∫blico',
      orgao: '√ìrg√£o P√∫blico',
      cargo: 'Cargo P√∫blico',
      dataProva: '',
      materias: foundSubjects.length > 0 ? foundSubjects : [
        { nome: 'Portugu√™s', peso: 4, topicos: [] },
        { nome: 'Conhecimentos Gerais', peso: 3, topicos: [] }
      ],
      horasEstudoSugeridas: '4',
      nivelDificuldade: 'medium',
      observacoes: 'An√°lise autom√°tica do edital'
    };
  }
}

export interface EditalAnalysis {
  concursoNome: string;
  orgao: string;
  cargo: string;
  dataProva: string;
  materias: {
    nome: string;
    peso: number;
    topicos: string[];
  }[];
  horasEstudoSugeridas: string;
  nivelDificuldade: 'easy' | 'medium' | 'hard';
  observacoes: string;
}